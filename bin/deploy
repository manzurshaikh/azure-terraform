#!/usr/bin/env bash

set -e

SCRIPT_NAME=$0
OPTION=$1

main()
{
  case $OPTION in
    manifests) manifests;;
    help) help;;
    *)
      [ $# -gt 0 ] && illegal_option_error
      help
      return 1
      ;;
  esac
}

manifests()
{
  check_app_region "$APP_REGION"
  check_app_env "$APP_ENV"
  local file=".manifests.$APP_REGION.$APP_ENV.tfplan"
  check_terraform_plan_age "$file"
  run_terraform "$APP_REGION-$APP_ENV" "$file"
}

check_app_region()
{
  local value=$1
  if [[ "$value" != "ind" && "$value" != "usa" ]]; then
    printf "$SCRIPT_NAME: illegal option for \$APP_REGION -- $value\n"
    help
    exit 1
  fi
}

check_app_env()
{
  local value=$1
  if [[ "$value" != "dev" && "$value" != "production" ]]; then
    printf "$SCRIPT_NAME: illegal option for \$APP_ENV -- $value\n"
    help
    exit 1
  fi
}

check_terraform_plan_age()
{
  local file=$1
  if [[ ! -f "$file" ]]; then
    printf "$SCRIPT_NAME: terraform plan does not exist\n"
    printf "$SCRIPT_NAME: run bin/plan command first\n"
    exit 1
  fi

  if [[ `stat -f %B $file` -le $(( `date +%s` - 300 )) ]]; then
    printf "$SCRIPT_NAME: terraform plan is older than 300 seconds\n"
    printf "$SCRIPT_NAME: run bin/plan command first\n"
    rm $file
    exit 1
  fi
}

run_terraform()
{
  local workspace=$1
  local file=$2
  terraform workspace select $workspace
  terraform apply $file
  rm $file
}

illegal_option_error()
{
  printf "$SCRIPT_NAME: illegal option -- $OPTION\n"
}

help()
{
  printf 'usage:\n'
  printf '\tAPP_REGION=[ind|usa] '$SCRIPT_NAME' common\n'
  printf '\tAPP_REGION=[ind|usa] APP_ENV=[dev|production] '$SCRIPT_NAME' manifests\n'
}

main $@
